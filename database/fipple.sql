-- ========================= Create schema ============================ --
CREATE SCHEMA IF NOT EXISTS app;
CREATE SCHEMA IF NOT EXISTS core;


-- ========================= Create tables ============================ --
CREATE TABLE IF NOT EXISTS app.users (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	birthdate DATE NOT NULL,
	sex CHAR(1) NOT NULL,
	is_active BOOL NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	updated_date_utc TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES identity."AspNetUsers"("Id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.devices (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	udid VARCHAR NOT NULL,
	logged_in BOOL NOT NULL,
	last_login_date_utc TIMESTAMP NOT NULL,
	os_type VARCHAR(20) NOT NULL,
	app_version VARCHAR(20) NOT NULL,
	time_zone VARCHAR NOT NULL,
	is_active BOOL NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	updated_date_utc TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.user_images (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	image VARCHAR NOT NULL,
	is_cover BOOL NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.interests (
	id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	name VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS app.user_interests (
	user_id BIGINT NOT NULL,
	interest_id SMALLINT NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (interest_id) REFERENCES app.interests ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.user_preferences (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	show_me CHAR(1) NOT NULL,
	max_distance_mi SMALLINT DEFAULT(100) NOT NULL,
	min_age SMALLINT DEFAULT(18) NOT NULL,
	max_age SMALLINT DEFAULT(100) NOT NULL,
	is_global BOOL DEFAULT(TRUE) NOT NULL,
	update_date_utc TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS core.countries (
	id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	name VARCHAR(150) NOT NULL
);

CREATE TABLE IF NOT EXISTS core.cities (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	country_id SMALLINT NOT NULL,
	name VARCHAR(30) NOT NULL,
	FOREIGN KEY (country_id) REFERENCES core.countries(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS core.user_locations (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	city_id INT NOT NULL,
	latitude DECIMAL(9,6) NOT NULL,
	longtitude DECIMAL(9,6) not NULL,
	ip INET NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (city_id) REFERENCES core.cities(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.match_groups (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	player_user_id BIGINT NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	FOREIGN KEY (player_user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.match_participants (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	match_group_id BIGINT NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (match_group_id) REFERENCES app.match_groups(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.matches (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	selected_participant_id BIGINT NOT NULL,
	FOREIGN KEY (selected_participant_id) REFERENCES app.match_participants(id) ON DELETE CASCADE,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL
);

CREATE TABLE IF NOT EXISTS app.chat_groups (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL
);

CREATE TABLE IF NOT EXISTS app.messages (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	chat_group_id BIGINT NOT NULL,
	message VARCHAR(1024) NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	updated_date_utc TIMESTAMP,
	is_active BOOL NOT NULL,
	FOREIGN KEY (chat_group_id) REFERENCES app.chat_groups(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.chat_participants (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	chat_group_id BIGINT NOT NULL,
	is_active BOOL NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (chat_group_id) REFERENCES app.chat_groups(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.user_blocks (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	user_id BIGINT NOT NULL,
	blocked_user_id BIGINT NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (blocked_user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.reports (
	id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
	name VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS app.user_reports (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
	user_id BIGINT NOT NULL,
	reported_user_id BIGINT NOT NULL,
	report_id SMALLINT NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (reported_user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (report_id) REFERENCES app.reports(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.credit_cards (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
	user_id BIGINT NOT NULL,
	card_number VARCHAR(25) NOT NULL,
	holder_name VARCHAR(150) NOT NULL,
	exp_month SMALLINT NOT NULL,
	exp_year SMALLINT NOT NULL,
	cvc SMALLINT NOT NULL,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	updated_date_utc TIMESTAMP,
	is_active BOOL NOT NULL,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS app.subscription_types (
	id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
	package VARCHAR(128) NOT NULL,
	name VARCHAR(500) NOT NULL,
	description VARCHAR,
	price decimal(9,2) NOT NULL,
	duration_month SMALLINT
);

CREATE TABLE IF NOT EXISTS app.user_payments (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
	user_id BIGINT NOT NULL,
	subscription_type_id SMALLINT NOT NULL,
	expire_date_utc TIMESTAMP,
	created_date_utc TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() at time zone 'utc') NOT NULL,
	updated_date_utc TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE,
	FOREIGN KEY (subscription_type_id) REFERENCES app.subscription_types(id) ON DELETE CASCADE
);

-- ========================= Create indexes ============================ --
-- users --
CREATE INDEX IF NOT EXISTS users_user_id ON app.users USING btree
(
    user_id ASC
);


-- devices --
CREATE INDEX IF NOT EXISTS devices_user_id ON app.devices USING btree
(
    user_id ASC
);


-- user_images --
CREATE INDEX IF NOT EXISTS user_images_user_id ON app.user_images USING btree
(
	user_id ASC
);


-- user_interests --
CREATE INDEX IF NOT EXISTS user_interests_user_id ON app.user_interests USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS user_interests_interest_id ON app.user_interests USING btree
(
	interest_id ASC
);


-- user_preferences --
CREATE INDEX IF NOT EXISTS user_preferences_user_id ON app.user_preferences USING btree
(
	user_id ASC
);


-- cities --
CREATE INDEX IF NOT EXISTS cities_country_id ON core.cities USING btree
(
	country_id ASC
);


-- user_locations --
CREATE INDEX IF NOT EXISTS user_locations_user_id ON core.user_locations USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS user_locations_city_id ON core.user_locations USING btree
(
	city_id ASC
);


-- match_groups --
CREATE INDEX IF NOT EXISTS match_groups_player_user_id ON app.match_groups USING btree
(
	player_user_id ASC
);


-- match_participants --
CREATE INDEX IF NOT EXISTS match_participants_user_id ON app.match_participants USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS match_participants_match_group_id ON app.match_participants USING btree
(
	match_group_id ASC
);


-- matches --
CREATE INDEX IF NOT EXISTS matches_selected_participant_id ON app.matches USING btree
(
	selected_participant_id ASC
);


-- messages --
CREATE INDEX IF NOT EXISTS messages_chat_group_id ON app.messages USING btree
(
	chat_group_id ASC
);


-- chat_participants --
CREATE INDEX IF NOT EXISTS chat_participants_user_id ON app.chat_participants USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS chat_participants_chat_group_id ON app.chat_participants USING btree
(
	chat_group_id ASC
);


-- user_blocks --
CREATE INDEX IF NOT EXISTS user_blocks_user_id ON app.user_blocks USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS user_blocks_blocked_user_id ON app.user_blocks USING btree
(
	blocked_user_id ASC
);


-- reports --
CREATE INDEX IF NOT EXISTS user_reports_user_id ON app.user_reports USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS user_reports_reported_user_id ON app.user_reports USING btree
(
	reported_user_id  ASC
);
CREATE INDEX IF NOT EXISTS user_reports_report_id ON app.user_reports USING btree
(
	report_id  ASC
);


-- credit_cards --
CREATE INDEX IF NOT EXISTS credit_cards_user_id ON app.credit_cards USING btree
(
	user_id ASC
);


-- user_payments --
CREATE INDEX IF NOT EXISTS user_payments_user_id ON app.user_payments USING btree
(
	user_id ASC
);
CREATE INDEX IF NOT EXISTS user_payments_subscription_type_id ON app.user_payments USING btree
(
	subscription_type_id ASC
);
